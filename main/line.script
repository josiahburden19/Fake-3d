function init(self)
	self.screen_center = vmath.vector3()
	self.screen_center.x, self.screen_center.y = window.get_size()
	self.screen_center = self.screen_center/2
	offset = 90
	pr_angle = vmath.vector3()
	mult = 1
	angle = vmath.vector3(0, 0, 1)
	length_of_line = 100
	zoom = 1
	update_angle()
	w = hash('w')
	a = hash('a')
	s = hash('s')
	d = hash('d')
	k = hash('k')
	j = hash('j')
	shift = hash('shift')
	space = hash('space')
	zoom_in = hash('zoom_in')
	zoom_out = hash('zoom_out')
	middle_mouse = hash('middle_mouse')
	coords = {
		90, 180, 0, 270
	}
	msg.post('.', 'acquire_input_focus')
end

function update_angle()
	pr_angle.x = math.floor(angle.x)
	pr_angle.y = math.floor(angle.y)
	pr_angle.z = math.floor(offset)
	msg.post('gui', 'angle_1',{angle = pr_angle.x})
	msg.post('gui', 'angle_2',{angle = pr_angle.y})
	msg.post('gui', 'angle_3',{angle = pr_angle.z})
end

function update(self, dt)
	update_angle()
	for j=100, 100, 1 do
		for i=0, 360, offset do
			local custom_offset = offset
			if i + offset > 360 then
				custom_offset = 360 - i
			end
			msg.post("@render:", "draw_line", {
				start_point = vmath.vector3(
				self.screen_center.x + j * zoom
				* math.sin(math.rad(angle.x + i + custom_offset)),
				self.screen_center.y +  j * zoom
				* math.cos(math.rad(angle.x + i + custom_offset))
				* math.sin(math.rad(angle.y)),
				0),

				end_point = vmath.vector3(
				self.screen_center.x + j * zoom
				* math.sin(math.rad(angle.x + i)),
				self.screen_center.y +  j * zoom
				* math.cos(math.rad(angle.x + i))
				* math.sin(math.rad(angle.y)),
				0),
				color = vmath.vector4(math.abs(i)/360, 1-math.abs(i)/360, 1, 1)
			})
			msg.post("@render:", "draw_line", {
				start_point = self.screen_center,
				end_point = vmath.vector3(
				self.screen_center.x + 100 * zoom
				* math.sin(math.rad(angle.x + i)),
				self.screen_center.y + 100 * zoom
				* math.cos(math.rad(angle.x + i))
				* math.sin(math.rad(angle.y)),
				0),
				color = vmath.vector4(math.abs(i)/360, 1-math.abs(i)/360, 1, 1)
			})
		end
	end
end

function clamp0to360(value)
	if value < 0 then
		return 0
	elseif value > 360 then
		return 360
	end
	return value
end

function on_input(self, action_id, action)
	if action_id == shift and action.pressed then
		mult = 1/8
	elseif action_id == shift and action.released then
		mult = 1
	end
	if action_id == w then
		angle.y = angle.y + mult
	elseif action_id == s then
		angle.y = angle.y - mult
	end
	if action_id == d then
		angle.x = angle.x + mult
	elseif action_id == a then
		angle.x = angle.x - mult
	end

	if action_id == k then
		offset = (offset*1000/993) * mult
	elseif action_id == j then
		if offset > 6 then
			offset = (offset/1000) * 993
		end
	end
	if action_id == zoom_in then
		zoom = zoom * 1.2
	elseif action_id == zoom_out then
		zoom = zoom / 1.2
	end
		
	if action_id == space and action.pressed then
		angle = vmath.vector3(0, -90, 0)
	end
	if action_id == middle_mouse then
		angle.x = angle.x + action.dx
		angle.y = angle.y + action.dy
	end
end